#!/bin/bash
#
# Manage Toolbox (CLI container)
#
# SG: https://google.github.io/styleguide/shell.xml
# https://docs.google.com/document/d/1gkRfW2xCWA9UhpciJWWeRtMX0F125mz9-ceF6kRrhJo/edit#
#

set -e

USER_ID=$(id -u)
GROUP_ID=$(cut -d: -f3 < <(getent group docker))

DOCKER_BIN_PATH=$(which docker 2> /dev/null)
DOCKER_SOCKET_PATH="${DOCKER_SOCKET_PATH:-/var/run/docker.sock}"
DOCKER_VOLUMES=" -v $DOCKER_SOCKET_PATH:/var/run/docker.sock "

CONTAINER_RUN_AS_PRIVILIGED=${CONTAINER_RUN_AS_PRIVILIGED:0}
CONTAINER_NAME="toolbox"
CONTAINER_VOLUMES=" -v $HOME:$HOME $DOCKER_VOLUMES "
CONTAINER_USER="-u $USER_ID:$GROUP_ID"
CONTAINER_IMAGE="alphasocket/toolbox-alpine:latest"
CONTAINER_COMMAND="sleep 999999"

# Globals
log() {
  echo -ne "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@\n" >&1
}

err() {
  echo -ne "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@\n" >&2
}

#
# Toolbox
#

function toolboxctl::initialize(){
    if [ -z "$DOCKER_BIN_PATH" ]; then
        err "Docker client not found"
        exit 1
    fi
}

function toolboxctl::destroy(){
    exit 0
}


function toolboxctl::pull_image(){
	docker pull $CONTAINER_IMAGE
}

function toolboxctl::init_container(){
    toolboxctl::remove_container
    toolboxctl::pull_image
	[[ $CONTAINER_RUN_AS_PRIVILIGED = 1 ]] && CONTAINER_USER="--privileged"
	docker run $CONTAINER_MODE $CONTAINER_USER --name "$CONTAINER_NAME" --net host $CONTAINER_VOLUMES -e HOME=$HOME -w $PWD $CONTAINER_IMAGE "$CONTAINER_COMMAND"
}

function toolboxctl::start_daemon(){
	CONTAINER_MODE="-d"
	toolboxctl::init_container
}

function toolboxctl::exec_command(){
	CONTAINER_MODE="-it"
    CONTAINER_COMMAND=$@
    
    if [ $RUNNING = 0 ]; then
        init_container
    else
        docker exec $CONTAINER_MODE $CONTAINER_USER "$CONTAINER_NAME" $CONTAINER_COMMAND
    fi
}

function toolboxctl::remove_container(){
    if [ $RUNNING = 1 ]; then
        docker stop "$CONTAINER_NAME" 
    fi
    docker rm "$CONTAINER_NAME" --force &> /dev/null || true 
    
}

function toolboxctl::run_container(){
	CONTAINER_COMMAND="bash"
	exec_command $CONTAINER_COMMAND
}

function toolboxctl::status_container(){
	docker ps -f "name=$CONTAINER_NAME"
}

function toolboxctl::stop_container(){
	docker stop -t 0 $CONTAINER_NAME 1> /dev/null
}

function toolboxctl::kill_container(){
	docker kill $CONTAINER_NAME
}

function toolboxctl::main(){
    toolboxctl::initialize
    
    if [ $(docker ps -f "name=$CONTAINER_NAME" --format '{{.Names}}' | grep -c $CONTAINER_NAME ) = 1 ]; then
        RUNNING=1
    else
        RUNNING=0
    fi

	case "$1" in
        start)
            if [ $RUNNING = 1 ]; then
                log "Toolbox already running"
            else
                toolboxctl::start_daemon
                log "Toolbox started"
            fi
            ;;
        restart)
            toolboxctl::start_daemon
            log "Toolbox started"
            ;;
        run)
            toolboxctl::run_container
            ;;
        status)
            if [ $RUNNING = 1 ]; then
                toolboxctl::status_container
            else
                log "Toolbox not running"
            fi
            ;;
        clean)
            toolboxctl::remove_container
            if [ $RUNNING = 1 ]; then
                log "Stopped and removed Toolbox container"
            else
                log "Removed Toolbox container"
            fi
            ;;
        update)
            toolboxctl::pull_image
            if [ $RUNNING = 1 ]; then
                toolboxctl::stop_container
                toolboxctl::run_container
                log "Updated Toolbox"
            fi
            ;;
        stop)
            if [ $RUNNING = 1 ]; then
                toolboxctl::stop_container
                log "Toolbox stopped"
            else
                err "Toolbox not running"
                exit 1
            fi
            ;;
        kill)
            if [ $RUNNING = 1 ]; then
                toolboxctl::kill_container
            else
                err "Toolbox not running"
                exit 1
            fi
            ;;
        exec)
            shift
            toolboxctl::exec_command $@
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Action not recognized"
            exit 64
            ;;
    esac
    
    toolboxctl::destroy
}

toolboxctl::main $@
