project: 
  title: &project_title alphasocket/dockerized-toolbox-alpine
  codename: &project_codename toolbox-alpine
  description: "This docker image will contain all required cli tools for security/development/testing operations.
  \nIt's included an nfs server to mount persistent volumes from the home directory see [NFS documentation](http://wiki.linux-nfs.org/wiki/index.php/Nfsv4_configuration) .
  \n
  \nBased on [ehough/docker-nfs-server](https://github.com/ehough/docker-nfs-server/tree/master)
  "

#
# Build process
# Creates dockerfile and file used in it
#
build:
  envvars:
    from: docker:dind
    name: *project_codename
    ports:
      main: 2049
    cmd:
      valueFromParse: ${BUILD_PATHS_BINARIES_FOLDER}/nfsd
    paths:
      bash_completitions: "$HOME/.bash_completion.d"
      binaries:
        folder: /usr/local/bin
      libraries:
        folder: /usr/local/lib
  imports:
    #- imports/nfsd.sh:/usr/bin/nfsd.sh
    #- imports/confd-binary:/usr/bin/confd
    #- imports/confd:/etc/confd
    - imports/pause:/usr/local/bin/pause
    - imports/runner:/usr/local/lib/toolbox/runner

#
# Setup process injected in dockerfile
#
setup:
  # Setup env 
  envvars:
    dependencies:
      setup: gcc py-setuptools openssl-dev jansson-dev python-dev build-base libc-dev file-dev automake autoconf libtool flex
      utilities: bash unzip jq htop git mercurial gnupg man man-pages fcgi openssh-client ansible file
      nfsd: nfs-utils iproute2 
      op: libc6-compat
      ##php7_2: php@php7_2 php-curl@php7_2 php-dom@php7_2 php-gd@php7_2 php-gettext@php7_2 php-iconv@php7_2 php-json@php7_2 php-mbstring@php7_2 php-mysqli@php7_2 php-opcache@php7_2 php-openssl@php7_2 php-pdo@php7_2 php-pdo_dblib@php7_2 php-pdo_mysql@php7_2 php-pdo_pgsql@php7_2 php-pdo_sqlite@php7_2 php-pear@php7_2 php-pgsql@php7_2 php-phar@php7_2 php-phpdbg@php7_2 php-posix@php7_2 php-session@php7_2 php-soap@php7_2 php-sockets@php7_2 php-sqlite3@php7_2 php-xml@php7_2 php-simplexml@php7_2 php-zip@php7_2 php-zlib@php7_2 php-tokenizer@php7_2 
      php: php7 php7-curl php7-dom php7-gd php7-ctype php7-gettext php7-iconv php7-json php7-mbstring php7-mcrypt php7-mysqli php7-opcache php7-openssl php7-pdo php7-pdo_dblib php7-pdo_mysql php7-pdo_pgsql php7-pdo_sqlite php7-pear php7-pgsql php7-phar php7-posix php7-session php7-soap php7-sockets php7-sqlite3 php7-xml php7-simplexml php7-zip php7-zlib php7-tokenizer
      node: nodejs nodejs-npm
      python: python python3 py-pip py-psutil
      db: mysql-client redis
      google: py-crcmod libc6-compat openssh-client
      runtime:
        valueFromParse: $SETUP_DEPENDENCIES_UTILITIES $SETUP_DEPENDENCIES_OP $SETUP_DEPENDENCIES_PHP $SETUP_DEPENDENCIES_NODE $SETUP_DEPENDENCIES_PYTHON $SETUP_DEPENDENCIES_DB $SETUP_DEPENDENCIES_GOOGLE $SETUP_DEPENDENCIES_NFSD
  processes:
    #- title: "Setup repository"
    #  commands:
      #  - curl -fsvSL https://php.codecasts.rocks/php-alpine.rsa.pub -o /etc/apk/keys/php-alpine.rsa.pub
      #  - echo '@php7_2 https://php.codecasts.rocks/v3.7/php-7.2' >> /etc/apk/repositories
      #  - apk add --no-cache $SETUP_DEPENDENCIES_PHP7_2
    #- title: "Setup export file"
    #  commands:
    #    - mkdir -p /var/lib/nfs/v4recovery
    #    - mkdir -p /var/lib/nfs/rpc_pipefs 
    #    - chmod 766 /etc/exports 
    #    - chmod 766 /var/lib/nfs/rpc_pipefs 
    #    - chmod 766 /var/lib/nfs/v4recovery
    #    
        
    - title: "Install extra binaries"
      commands:
        - mkdir -p "${BUILD_PATHS_BINARIES_FOLDER}"
        - mkdir -p "${BUILD_PATHS_LIBRARIES_FOLDER}"
        
        # Python
        - pip install --upgrade pip
        
        # vcs
        - curl -fsvSL https://bitbucket.org/yujiewu/hgflow/downloads/hgflow-v0.9.8.3.tar.bz2 -o /tmp/hgflow-installer.tar.bz2
        - mkdir /tmp/hgflow ${BUILD_PATHS_LIBRARIES_FOLDER}/hg
        - tar -xvjf /tmp/hgflow-installer.tar.bz2 -C /tmp/hgflow/
        - mv /tmp/hgflow/hgflow.py ${BUILD_PATHS_LIBRARIES_FOLDER}/hg/flow.py
        - ln -s /usr/local/lib/hg/flow.py /usr/local/bin/hgflow.py
        - rm -rf /tmp/hgflow
        
        - curl -fsvSL https://raw.github.com/nvie/gitflow/develop/contrib/gitflow-installer.sh -o /tmp/gitflow-installer.sh
        - chmod +x /tmp/gitflow-installer.sh
        - /tmp/gitflow-installer.sh
        - rm /tmp/gitflow-installer.sh
        - curl -fsvSL https://raw.githubusercontent.com/AlphaSocket/git-get-latest-release/master/get-latest-release -o ${BUILD_PATHS_BINARIES_FOLDER}/git-get-latest-release
        - chmod +x ${BUILD_PATHS_BINARIES_FOLDER}/git-get-latest-release
        
        # PHP
        - curl -fsvSL https://phar.phpunit.de/phpunit.phar -o ${BUILD_PATHS_BINARIES_FOLDER}/phpunit.phar
        - curl -fsvSL http://static.phpmd.org/php/latest/phpmd.phar -o ${BUILD_PATHS_BINARIES_FOLDER}/phpmd.phar
        - curl -fsvSL https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar -o ${BUILD_PATHS_BINARIES_FOLDER}/phpcs.phar
        - curl -fsvSL https://squizlabs.github.io/PHP_CodeSniffer/phpcbf.phar -o ${BUILD_PATHS_BINARIES_FOLDER}/phpcbf.phar
        - curl -fsvSL http://cs.sensiolabs.org/download/php-cs-fixer-v2.phar -o ${BUILD_PATHS_BINARIES_FOLDER}/php-cs-fixer.phar
        - curl -fsvSL https://getcomposer.org/composer.phar -o ${BUILD_PATHS_BINARIES_FOLDER}/composer.phar
        
        # Wordpress
        - curl -fsvSL https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -o ${BUILD_PATHS_BINARIES_FOLDER}/wp-cli.phar
        
        # Magento
        - curl -fsvSL https://files.magerun.net/n98-magerun-latest.phar -o ${BUILD_PATHS_BINARIES_FOLDER}/n98-magerun.phar
        - curl -fsvSL https://raw.githubusercontent.com/mhauri/generate-modman/master/generate-modman -o ${BUILD_PATHS_BINARIES_FOLDER}/generate-modman
        - curl -fsvSL https://raw.githubusercontent.com/colinmollenhour/modman/master/modman -o ${BUILD_PATHS_BINARIES_FOLDER}/modman
        
        - MAGECONFIGSYNC_LATEST=$(git-get-latest-release https://github.com/punkstar/mageconfigsync )
        - curl -fsvSL https://github.com/punkstar/mageconfigsync/releases/download/${MAGECONFIGSYNC_LATEST}/mageconfigsync-${MAGECONFIGSYNC_LATEST}.phar -o ${BUILD_PATHS_BINARIES_FOLDER}/mageconfigsync.phar
        
        - MAGESCAN_LATEST=$(git-get-latest-release https://github.com/steverobbins/magescan )
        - curl -fsvSL https://github.com/steverobbins/magescan/releases/download/${MAGESCAN_LATEST}/magescan.phar -o ${BUILD_PATHS_BINARIES_FOLDER}/magescan.phar
        - pip install mwscan
        
        #
        # Docker
        #
        - pip install docker-compose
        
        - DRY_LATEST=$(git-get-latest-release https://github.com/moncho/dry/ )
        - curl -fsvSL https://github.com/moncho/dry/releases/download/${DRY_LATEST}/dry-linux-amd64 -o ${BUILD_PATHS_BINARIES_FOLDER}/dry
        
        #
        # Clouds
        #
        - pip install awscli
        #- pip install gcloud
        - GCLOUD_VERSION="203.0.0"
        - curl -fsvSL https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${GCLOUD_VERSION}-linux-x86_64.tar.gz -o /tmp/google-cloud-sdk-linux-x86_64.tar.gz
        - tar xf /tmp/google-cloud-sdk-linux-x86_64.tar.gz -C /usr/local/lib/
        - ln -s /usr/local/lib/google-cloud-sdk/bin/* /usr/local/bin/
        - rm /tmp/google-cloud-sdk-linux-x86_64.tar.gz
        
        #
        # Kubernetes
        #
        - KUBECTL_LATEST=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
        - curl -fsvSL https://storage.googleapis.com/kubernetes-release/release/${KUBECTL_LATEST}/bin/linux/amd64/kubectl -o ${BUILD_PATHS_BINARIES_FOLDER}/kubectl
        
        - HELM_LATEST=$(git-get-latest-release https://github.com/kubernetes/helm/ | sed -e "s/ //g" | sed -e "s/latest//g" )
        - mkdir /tmp/helm
        - curl -fsvSL "https://storage.googleapis.com/kubernetes-helm/helm-${HELM_LATEST}-linux-amd64.tar.gz" -o /tmp/helm/helm.tar.gz
        - tar -xvf /tmp/helm/helm.tar.gz -C /tmp/helm/
        - mv /tmp/helm/linux-amd64/helm ${BUILD_PATHS_BINARIES_FOLDER}/helm
        
        - KOPS_LATEST=$(git-get-latest-release https://github.com/kubernetes/kops )
        - curl -fsvSL https://github.com/kubernetes/kops/releases/download/${KOPS_LATEST}/kops-linux-amd64 -o ${BUILD_PATHS_BINARIES_FOLDER}/kops
        
        - ARGO_LATEST=$(git-get-latest-release https://github.com/argoproj/argo )
        - curl -fsvSL https://github.com/argoproj/argo/releases/download/${ARGO_LATEST}/argo-linux-amd64 -o ${BUILD_PATHS_BINARIES_FOLDER}/argo
        
        - KOMPOSE_LATEST=$(git-get-latest-release https://github.com/kubernetes/kompose )
        - curl -fsvSL https://github.com/kubernetes/kompose/releases/download/${KOMPOSE_LATEST}/kompose-linux-amd64 -o ${BUILD_PATHS_BINARIES_FOLDER}/kompose
        
        - curl -fsvSL https://storage.googleapis.com/skaffold/releases/latest/skaffold-linux-amd64 -o ${BUILD_PATHS_BINARIES_FOLDER}/skaffold
        
        # Local cluster management
        ## Minikube
        - MINIKUBE_LATEST=$(git-get-latest-release https://github.com/kubernetes/minikube/ )
        - mkdir -p ${BUILD_PATHS_LIBRARIES_FOLDER}/kubernetes
        - curl -fsvSL https://storage.googleapis.com/minikube/releases/${MINIKUBE_LATEST}/minikube-linux-amd64 -o ${BUILD_PATHS_LIBRARIES_FOLDER}/kubernetes/minikube
        - chmod +x ${BUILD_PATHS_LIBRARIES_FOLDER}/kubernetes/minikube
        - ln -s ${BUILD_PATHS_LIBRARIES_FOLDER}/kubernetes/minikube ${BUILD_PATHS_BINARIES_FOLDER}/minikube
        ## kubeadm DIND
        - git -C ${BUILD_PATHS_LIBRARIES_FOLDER}/ clone https://github.com/kubernetes-sigs/kubeadm-dind-cluster
        - ln -s ${BUILD_PATHS_LIBRARIES_FOLDER}/kubeadm-dind-cluster/dind-cluster.sh ${BUILD_PATHS_BINARIES_FOLDER}/dind-cluster.sh
        ## localclusterctl
        - curl -fsvSL https://gist.githubusercontent.com/AlphaSocket/0f497330870e002e732c3abe824b2317/raw/a82cb65e0edce04ff3b6c8a6f31e8015cdd8f859/localclusterctl -o ${BUILD_PATHS_BINARIES_FOLDER}/localclusterctl
        
        # OnePassword
        - mkdir /tmp/op
        - curl -fsvSL https://cache.agilebits.com/dist/1P/op/pkg/v0.4/op_linux_amd64_v0.4.zip -o /tmp/op/op.zip
        - unzip /tmp/op/op.zip -d /tmp/op
        - mv /tmp/op/op ${BUILD_PATHS_BINARIES_FOLDER}/op
        - rm -r /tmp/op
        
        # Browser stack
        - mkdir /tmp/browserstack
        - curl -fsvSL https://www.browserstack.com/browserstack-local/BrowserStackLocal-linux-x64.zip -o /tmp/browserstack/BrowserStackLocal.zip
        - unzip /tmp/browserstack/BrowserStackLocal.zip -d /tmp/browserstack
        - mv /tmp/browserstack/BrowserStackLocal ${BUILD_PATHS_BINARIES_FOLDER}/BrowserStackLocal
        - rm -r /tmp/browserstack
        
        # Mysql
        - curl -fsvSL https://gist.githubusercontent.com/AlphaSocket/e681bc0c087e6b4e1f6d4f8881f2ac5e/raw/081d1d28dc3b352582f2b9805db46cf055d67a6e/mysql-dump-all-db-here -o ${BUILD_PATHS_BINARIES_FOLDER}/mysql-dump-all-db-here
        
        # NodeJs
        - curl -fsvSL https://gist.githubusercontent.com/AlphaSocket/f139f80f6fd3bf2ff155ced0b81ce616/raw/196bf78149c308fe6d687926c09e73052656dc6f/node-get-dependencies -o ${BUILD_PATHS_BINARIES_FOLDER}/node-get-dependencies
        - curl -fsvSL https://gist.githubusercontent.com/AlphaSocket/9780449ae2e3222e580d672f9aed68ae/raw/4c9877313f45d27ebdcd66c87e602d9302e8cbbd/node-link-dependencies -o ${BUILD_PATHS_BINARIES_FOLDER}/node-link-dependencies
        
        - curl -fsvSL https://raw.githubusercontent.com/ehough/docker-nfs-server/master/entrypoint.sh -o ${BUILD_PATHS_BINARIES_FOLDER}/nfsd
        - sed -i 's_#!/usr/bin/env bash_#!/bin/bash_g' ${BUILD_PATHS_BINARIES_FOLDER}/nfsd
        - echo "rpc_pipefs  /var/lib/nfs/rpc_pipefs  rpc_pipefs  defaults  0  0" >> /etc/fstab 
        - echo "nfsd        /proc/fs/nfsd            nfsd        defaults  0  0" >> /etc/fstab
        - rm -rf /etc/exports
        
        # Final config
        - chmod -R +x ${BUILD_PATHS_BINARIES_FOLDER}
        
    - title: "Setup NFS folders"
      commands:
        - mkdir -p /var/lib/nfs/v4recovery
        - mkdir -p /var/lib/nfs/rpc_pipefs
        
config:
  envvars:
    nfs:
      shared:
        directory: '/var/nfsshare'
      ip:
        permitted: "127.0.0.1,10.*.*.*,172.16.*.*,172.17.*.*,172.18.*.*,172.19.*.*,172.20.*.*,172.21.*.*,172.22.*.*,172.23.*.*,172.24.*.*,172.25.*.*,172.26.*.*,172.27.*.*,172.28.*.*,172.29.*.*,172.30.*.*,172.31.*.*,192.168.*.*"
      sync: 'async'
    
  processes:
    #
    # Bash completitions
    #
    - title: "Add Bash completitions"
      shell_condition: $(id -u) -ne 0
      commands:
        - BUILD_PATHS_BASH_COMPLETITIONS="$HOME/.bash_completion.d"
        - mkdir -p ${BUILD_PATHS_BASH_COMPLETITIONS}/
        - curl -fsSl https://raw.githubusercontent.com/netz98/n98-magerun/master/res/autocompletion/bash/n98-magerun.phar.bash -o ${BUILD_PATHS_BASH_COMPLETITIONS}/n98-magerun
        - curl -fsSl https://raw.githubusercontent.com/iArren/composer-bash-completion/master/composer -o ${BUILD_PATHS_BASH_COMPLETITIONS}/composer
        - curl -fsSl https://raw.githubusercontent.com/wp-cli/wp-cli/master/utils/wp-completion.bash -o ${BUILD_PATHS_BASH_COMPLETITIONS}/wp-cli
        - DOCKER_COMPOSE_LATEST_VERSION=$(git-get-latest-release https://github.com/docker/compose/ )
        - curl -fsSl https://raw.githubusercontent.com/docker/compose/${DOCKER_COMPOSE_LATEST_VERSION}/contrib/completion/bash/docker-compose -o ${BUILD_PATHS_BASH_COMPLETITIONS}/docker-compose
        - minikube completion bash > ${BUILD_PATHS_BASH_COMPLETITIONS}/minikube
        - kubectl completion bash > ${BUILD_PATHS_BASH_COMPLETITIONS}/kubectl
        - kops completion bash > ${BUILD_PATHS_BASH_COMPLETITIONS}/kops
        - helm completion bash > ${BUILD_PATHS_BASH_COMPLETITIONS}/helm
        - kompose completion bash > ${BUILD_PATHS_BASH_COMPLETITIONS}/kompose
        
    #
    # Conf
    #
    - title: "Configurations"
      shell_condition: $(id -u) -ne 0
      commands:
        - gcloud config set core/disable_usage_reporting true || true
        - gcloud config set component_manager/disable_update_check true || true
        - gcloud config set metrics/environment github_docker_image || true
    
#
# Test
#
test:
  envvars:
    container:
      main:
        id: toolbox_nfs_server
      volumes:
        home: "$HOME:$HOME"
        socket: "/var/run/docker.sock:/var/run/docker.sock"
      workdir: $PWD 
      envvars:
        home: $HOME
      
  processes:
    #
    # Starting
    #
    - title: "Testing container readiness"
      commands:
        - TEST_CONDITION="docker exec $TEST_CONTAINER_MAIN_ID docker-rediness-test"
        - TEST_BREAK_CONDITION='[ "$(docker inspect -f '{{.State.Running}}' "$TEST_CONTAINER_MAIN_ID")" != "true" ]'
        - MAX_TRIES=300
        - SECONDS_BETWEEN_TRIES=1
        - c=0
        - while ! eval "$TEST_CONDITION"; 
          do 
            if [ $c -ge ${MAX_TRIES} ] || eval "$TEST_BREAK_CONDITION" ; then
                echo "Error $TEST_CONTAINER_NAME container failed, printing logs and exiting\n";
                docker logs $TEST_CONTAINER_MAIN_ID;
                exit 1;
              else
                c=$(($c + 1));
            fi;
            echo "Try $c failed"; 
            sleep ${SECONDS_BETWEEN_TRIES}; 
          done && echo "### Container ready \n"

        - chmod +x bin/toolboxctl
        - mkdir -p ~/home/lib/
        - export MAIN_CONTAINER_IMAGE="${BUILD_USER}/${BUILD_NAME}:${BUILD_VERSION}"
        - export NFS_CONTAINER_IMAGE="${BUILD_USER}/${BUILD_NAME}:${BUILD_VERSION}"
        - bin/toolboxctl up
        - ls ~/lib/hg/flow.py
        
        