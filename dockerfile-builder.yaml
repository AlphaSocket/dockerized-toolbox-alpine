project: 
  title: &project_title alphasocket/dockerized-toolbox
  codename: &project_codename toolbox
  description: All required cli in one container

#
# Build process
# Creates dockerfile and file used in it
#
build:
  envvars:
    name: *project_codename
    cmd: "bash -i"
    # Varni
    paths:
      binaries:
        folder: /usr/local/bin/

#
# Setup process injected in dockerfile
#
setup:
  # Setup env 
  envvars:
    dependencies:
      runtime: bash htop curl git mysql-client fcgi nodejs nodejs-npm php7 python python3 py-pip
  processes:
    - title: "Install extra binaries"
      commands:
        # Git
        - curl -fsSL https://raw.githubusercontent.com/AlphaSocket/git-get-latest-release/master/get-latest-release.sh -o /usr/local/bin/git-get-latest-release
        - chmod +x /usr/local/bin/git-get-latest-release
        
        # PHP
        - curl -sSL https://phar.phpunit.de/phpunit.phar -o /usr/local/bin/phpunit.phar
        - curl -sSL http://static.phpmd.org/php/latest/phpmd.phar -o /usr/local/bin/phpmd.phar
        - curl -sSL https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar -o /usr/local/bin/phpcs.phar
        - curl -sSL http://cs.sensiolabs.org/download/php-cs-fixer-v2.phar -o /usr/local/bin/php-cs-fixer.phar
        - curl -sSL https://getcomposer.org/composer.phar -o /usr/local/bin/composer.phar
        # Wordpress
        - curl -sSL https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -o /usr/local/bin/wp-cli.phar
        # Magento
        - curl -sSL https://files.magerun.net/n98-magerun-latest.phar -o /usr/local/bin/n98-magerun.phar
        
        - curl -sSL https://raw.githubusercontent.com/colinmollenhour/modman/master/modman -o /usr/local/bin/modman
        
        - MAGECONFIGSYNC_LATEST=$(git-get-latest-release https://github.com/punkstar/mageconfigsync )
        - curl -sSL https://github.com/punkstar/mageconfigsync/releases/download/$MAGECONFIGSYNC_LATEST/mageconfigsync-${MAGECONFIGSYNC_LATEST}.phar -o /usr/local/bin/mageconfigsync.phar
        
        # Kubernetes
        - KUBECTL_LATEST=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
        - curl -sSL https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_LATEST/bin/linux/amd64/kubectl -o /usr/local/bin/kubectl
        
        - curl -sSL https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 -o /usr/local/bin/minikube
        
        - KOPS_LATEST=$(git-get-latest-release https://github.com/kubernetes/kops )
        - curl -sSL https://github.com/kubernetes/kops/releases/download/$KOPS_LATEST/kops-linux-amd64 -o /usr/local/bin/kops
        
        - ARGO_LATEST=$(git-get-latest-release https://github.com/argoproj/argo )
        - curl -sSL https://github.com/argoproj/argo/releases/download/$ARGO_LATEST/argo-linux-amd64 -o /usr/local/bin/argo
        
        # OnePassword
        - mkdir /tmp/op
        - curl -sSL https://cache.agilebits.com/dist/1P/op/pkg/v0.4/op_linux_amd64_v0.4.zip -o /tmp/op/op_linux_amd64_v0.4.zip
        - unzip /tmp/op/op_linux_amd64_v0.4.zip -d /tmp/op
        - mv /tmp/op/op /usr/local/bin/op
        - rm -r /tmp/op
        
        # Op
        - chmod -R +x /usr/local/bin
#
# Config process run just before the entrypoint
#
test:
  processes:
    #
    # Starting
    #
    - title: "Testing container readiness"
      commands:
        - TEST_CONTAINER_MAIN_ID=$(
            docker run
              -d --name=$TEST_CONTAINER_NAME
              ${BUILD_USER}/${BUILD_NAME}:${BUILD_VERSION}
          )
        - TEST_CONDITION="docker exec $TEST_CONTAINER_MAIN_ID docker-rediness-test"
        - TEST_BREAK_CONDITION='[ "$(docker inspect -f '{{.State.Running}}' "$TEST_CONTAINER_MAIN_ID")" != "true" ]'
        - MAX_TRIES=300
        - SECONDS_BETWEEN_TRIES=1
        - c=0
        - while ! eval "$TEST_CONDITION"; 
          do 
            if [ $c -ge ${MAX_TRIES} ] || eval "$TEST_BREAK_CONDITION" ; then
                echo "Error $TEST_CONTAINER_NAME container failed, printing logs and exiting\n";
                docker logs $TEST_CONTAINER_MAIN_ID;
                exit 1;
              else
                c=$(($c + 1));
            fi;
            echo "Try $c failed"; 
            sleep ${SECONDS_BETWEEN_TRIES}; 
          done && echo "### Container ready \n"

    # 
    # Run nginx
    # 
    - title: "Testing binaries"
      commands:
        - docker exec $TEST_CONTAINER_NGINX_ID kubectl --version
