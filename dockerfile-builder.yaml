project: 
  title: &project_title alphasocket/dockerized-toolbox-alpine
  codename: &project_codename toolbox-alpine
  description: All required cli in one container

#
# Build process
# Creates dockerfile and file used in it
#
build:
  envvars:
    from: docker:dind
    name: *project_codename
    cmd: "sleep 999"
    # Varni
    paths:
      binaries:
        folder: /usr/local/bin

#
# Setup process injected in dockerfile
#
setup:
  # Setup env 
  envvars:
    dependencies:
      setup: gcc py-setuptools openssl-dev jansson-dev python-dev build-base libc-dev file-dev automake autoconf libtool flex
      utilities: bash unzip jq htop git mercurial gnupg man man-pages fcgi py-pip py-psutil
      op: libc6-compat
      #php7_2: php@php7_2 php-curl@php7_2 php-dom@php7_2 php-gd@php7_2 php-gettext@php7_2 php-iconv@php7_2 php-json@php7_2 php-mbstring@php7_2 php-mysqli@php7_2 php-opcache@php7_2 php-openssl@php7_2 php-pdo@php7_2 php-pdo_dblib@php7_2 php-pdo_mysql@php7_2 php-pdo_pgsql@php7_2 php-pdo_sqlite@php7_2 php-pear@php7_2 php-pgsql@php7_2 php-phar@php7_2 php-phpdbg@php7_2 php-posix@php7_2 php-session@php7_2 php-soap@php7_2 php-sockets@php7_2 php-sqlite3@php7_2 php-xml@php7_2 php-zip@php7_2 php-zlib@php7_2 
      php: php7 php7-curl php7-dom php7-gd php7-ctype php7-gettext php7-iconv php7-json php7-mbstring php7-mcrypt php7-mysqli php7-opcache php7-openssl php7-pdo php7-pdo_dblib php7-pdo_mysql php7-pdo_pgsql php7-pdo_sqlite php7-pear php7-pgsql php7-phar php7-posix php7-session php7-soap php7-sockets php7-sqlite3 php7-xml php7-zip php7-zlib
      node: nodejs nodejs-npm
      python: python python3 py-pip
      db: mysql-client redis
      google: py-crcmod libc6-compat openssh-client
      runtime:
        valueFromParse: $SETUP_DEPENDENCIES_UTILITIES $SETUP_DEPENDENCIES_OP $SETUP_DEPENDENCIES_PHP $SETUP_DEPENDENCIES_NODE $SETUP_DEPENDENCIES_PYTHON $SETUP_DEPENDENCIES_DB $SETUP_DEPENDENCIES_GOOGLE
  processes:
    #- title: "Setup repository"
    #  commands:
      #  - curl -fsSL https://php.codecasts.rocks/php-alpine.rsa.pub -o /etc/apk/keys/php-alpine.rsa.pub
      #  - echo '@php7_2 https://php.codecasts.rocks/v3.7/php-7.2' >> /etc/apk/repositories
      #  - apk add --no-cache $SETUP_DEPENDENCIES_PHP7_2
        
    - title: "Install extra binaries"
      commands:
        - pip install --upgrade pip
        # vcs
        - curl -fsSL https://bitbucket.org/yujiewu/hgflow/downloads/hgflow-v0.9.8.3.tar.bz2 -o /tmp/hgflow-installer.tar.bz2
        - mkdir /tmp/hgflow
        - tar -xvjf /tmp/hgflow-installer.tar.bz2 -C /tmp/hgflow/
        - mv /tmp/hgflow/hgflow.py $BUILD_PATHS_BINARIES_FOLDER/hgflow.py
        - rm -rf /tmp/hgflow
        
        - curl -fsSL https://raw.github.com/nvie/gitflow/develop/contrib/gitflow-installer.sh -o /tmp/gitflow-installer.sh
        - chmod +x /tmp/gitflow-installer.sh
        - /tmp/gitflow-installer.sh
        - rm /tmp/gitflow-installer.sh
        - curl -fsSL https://raw.githubusercontent.com/AlphaSocket/git-get-latest-release/master/get-latest-release -o $BUILD_PATHS_BINARIES_FOLDER/git-get-latest-release
        - chmod +x $BUILD_PATHS_BINARIES_FOLDER/git-get-latest-release
        
        # PHP
        - curl -fsSL https://phar.phpunit.de/phpunit.phar -o $BUILD_PATHS_BINARIES_FOLDER/phpunit.phar
        - curl -fsSL http://static.phpmd.org/php/latest/phpmd.phar -o $BUILD_PATHS_BINARIES_FOLDER/phpmd.phar
        - curl -fsSL https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar -o $BUILD_PATHS_BINARIES_FOLDER/phpcs.phar
        - curl -fsSL http://cs.sensiolabs.org/download/php-cs-fixer-v2.phar -o $BUILD_PATHS_BINARIES_FOLDER/php-cs-fixer.phar
        - curl -fsSL https://getcomposer.org/composer.phar -o $BUILD_PATHS_BINARIES_FOLDER/composer.phar
        
        # Wordpress
        - curl -fsSL https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -o $BUILD_PATHS_BINARIES_FOLDER/wp-cli.phar
        
        # Magento
        - curl -fsSL https://files.magerun.net/n98-magerun-latest.phar -o $BUILD_PATHS_BINARIES_FOLDER/n98-magerun.phar
        - curl -fsSL https://raw.githubusercontent.com/colinmollenhour/modman/master/modman -o $BUILD_PATHS_BINARIES_FOLDER/modman
        
        - MAGECONFIGSYNC_LATEST=$(git-get-latest-release https://github.com/punkstar/mageconfigsync )
        - curl -fsSL https://github.com/punkstar/mageconfigsync/releases/download/$MAGECONFIGSYNC_LATEST/mageconfigsync-${MAGECONFIGSYNC_LATEST}.phar -o $BUILD_PATHS_BINARIES_FOLDER/mageconfigsync.phar
        - pip install mwscan
      
        # Docker
        - pip install docker-compose
        - curl -fsSL https://moncho.github.io/dry/dryup.sh -o $BUILD_PATHS_BINARIES_FOLDER/dry
        
        # Clouds
        - pip install awscli
        #- pip install gcloud
        - GCLOUD_VERSION="199.0.0"
        - curl -fsSL https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-${GCLOUD_VERSION}-linux-x86_64.tar.gz -o /tmp/google-cloud-sdk-linux-x86_64.tar.gz
        - tar xf /tmp/google-cloud-sdk-linux-x86_64.tar.gz -C /usr/local/lib/
        - ln -s /usr/local/lib/google-cloud-sdk/bin/* /usr/local/bin/
        - rm /tmp/google-cloud-sdk-linux-x86_64.tar.gz
        
        # Kubernetes
        - KUBECTL_LATEST=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
        - curl -fsSL https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_LATEST/bin/linux/amd64/kubectl -o $BUILD_PATHS_BINARIES_FOLDER/kubectl
        
        - HELM_LATEST=$(git-get-latest-release https://github.com/kubernetes/helm/ )
        - mkdir /tmp/helm
        - curl -fsSL https://storage.googleapis.com/kubernetes-helm/helm-${HELM_LATEST}-linux-amd64.tar.gz -o /tmp/helm/helm.tar.gz
        - tar -xvf /tmp/helm/helm.tar.gz -C /tmp/helm/
        - mv /tmp/helm/linux-amd64/helm $BUILD_PATHS_BINARIES_FOLDER/helm
        
        - KOPS_LATEST=$(git-get-latest-release https://github.com/kubernetes/kops )
        - curl -fsSL https://github.com/kubernetes/kops/releases/download/$KOPS_LATEST/kops-linux-amd64 -o $BUILD_PATHS_BINARIES_FOLDER/kops
        
        - ARGO_LATEST=$(git-get-latest-release https://github.com/argoproj/argo )
        - curl -fsSL https://github.com/argoproj/argo/releases/download/$ARGO_LATEST/argo-linux-amd64 -o $BUILD_PATHS_BINARIES_FOLDER/argo
        
        # Cluster management
        #- MINIKUBE_LATEST=$(git-get-latest-release https://github.com/kubernetes/minikube/ )
        #- curl -fsSL https://storage.googleapis.com/minikube/releases/$MINIKUBE_LATEST/minikube-linux-amd64 -o $BUILD_PATHS_BINARIES_FOLDER/minikube
        - git -C /usr/local/lib/ clone https://github.com/Alphasocket/kubeadm-dind-cluster
        - ln -s /usr/local/lib/kubeadm-dind-cluster/dind-cluster.sh $BUILD_PATHS_BINARIES_FOLDER/dind-cluster.sh
        - ln -s /usr/local/lib/kubeadm-dind-cluster/clusterctl $BUILD_PATHS_BINARIES_FOLDER/clusterctl
        
        # OnePassword
        - mkdir /tmp/op
        - curl -fsSL https://cache.agilebits.com/dist/1P/op/pkg/v0.4/op_linux_amd64_v0.4.zip -o /tmp/op/op.zip
        - unzip /tmp/op/op.zip -d /tmp/op
        - mv /tmp/op/op /usr/local/bin/op
        - rm -r /tmp/op
        
        # Final config
        - chmod -R +x /usr/local/bin
        
        
config:
  processes:
    #
    # Conf
    #
    - title: "Configurations"
      commands:
        - gcloud config set core/disable_usage_reporting true
        - gcloud config set component_manager/disable_update_check true
        - gcloud config set metrics/environment github_docker_image
        
#
# Test
#
test:
  processes:
    #
    # Starting
    #
    - title: "Testing container readiness"
      commands:
        - TEST_CONTAINER_MAIN_ID=$(
            docker run
              -d --name=$TEST_CONTAINER_NAME
              ${BUILD_USER}/${BUILD_NAME}:${BUILD_VERSION}
          )
        - TEST_CONDITION="docker exec $TEST_CONTAINER_MAIN_ID docker-rediness-test"
        - TEST_BREAK_CONDITION='[ "$(docker inspect -f '{{.State.Running}}' "$TEST_CONTAINER_MAIN_ID")" != "true" ]'
        - MAX_TRIES=300
        - SECONDS_BETWEEN_TRIES=1
        - c=0
        - while ! eval "$TEST_CONDITION"; 
          do 
            if [ $c -ge ${MAX_TRIES} ] || eval "$TEST_BREAK_CONDITION" ; then
                echo "Error $TEST_CONTAINER_NAME container failed, printing logs and exiting\n";
                docker logs $TEST_CONTAINER_MAIN_ID;
                exit 1;
              else
                c=$(($c + 1));
            fi;
            echo "Try $c failed"; 
            sleep ${SECONDS_BETWEEN_TRIES}; 
          done && echo "### Container ready \n"

    # 
    # Run nginx
    # 
    - title: "Testing binaries"
      commands:
        - docker exec $TEST_CONTAINER_MAIN_ID n98-magerun.phar
        - docker exec $TEST_CONTAINER_MAIN_ID kubectl version -c 
