#!/bin/sh
set -e

# Install all dependencies
echo "### Install all dependencies..."
apk add --no-cache curl ca-certificates gettext $SETUP_DEPENDENCIES_SETUP $SETUP_DEPENDENCIES_CONFIG $SETUP_DEPENDENCIES_RUNTIME


# Setup repository
echo "### Setup repository..."
curl -fsSL https://php.codecasts.rocks/php-alpine.rsa.pub -o /etc/apk/keys/php-alpine.rsa.pub
echo '@php7_2 https://php.codecasts.rocks/v3.7/php-7.2' >> /etc/apk/repositories
echo '@php7_0 https://php.codecasts.rocks/v3.7/php-7.0' >> /etc/apk/repositories

# Install extra binaries
echo "### Install extra binaries..."
apk add --no-cache $SETUP_DEPENDENCIES_PHP
curl -fsSL https://raw.githubusercontent.com/AlphaSocket/git-get-latest-release/master/get-latest-release -o $BUILD_PATHS_BINARIES_FOLDER/git-get-latest-release
chmod +x $BUILD_PATHS_BINARIES_FOLDER/git-get-latest-release
curl -fsSL https://phar.phpunit.de/phpunit.phar -o $BUILD_PATHS_BINARIES_FOLDER/phpunit.phar
curl -fsSL http://static.phpmd.org/php/latest/phpmd.phar -o $BUILD_PATHS_BINARIES_FOLDER/phpmd.phar
curl -fsSL https://squizlabs.github.io/PHP_CodeSniffer/phpcs.phar -o $BUILD_PATHS_BINARIES_FOLDER/phpcs.phar
curl -fsSL http://cs.sensiolabs.org/download/php-cs-fixer-v2.phar -o $BUILD_PATHS_BINARIES_FOLDER/php-cs-fixer.phar
curl -fsSL https://getcomposer.org/composer.phar -o $BUILD_PATHS_BINARIES_FOLDER/composer.phar
curl -fsSL https://raw.githubusercontent.com/wp-cli/builds/gh-pages/phar/wp-cli.phar -o $BUILD_PATHS_BINARIES_FOLDER/wp-cli.phar
curl -fsSL https://files.magerun.net/n98-magerun-latest.phar -o $BUILD_PATHS_BINARIES_FOLDER/n98-magerun.phar
curl -fsSL https://raw.githubusercontent.com/colinmollenhour/modman/master/modman -o $BUILD_PATHS_BINARIES_FOLDER/modman
MAGECONFIGSYNC_LATEST=$(git-get-latest-release https://github.com/punkstar/mageconfigsync )
curl -fsSL https://github.com/punkstar/mageconfigsync/releases/download/$MAGECONFIGSYNC_LATEST/mageconfigsync-${MAGECONFIGSYNC_LATEST}.phar -o $BUILD_PATHS_BINARIES_FOLDER/mageconfigsync.phar
KUBECTL_LATEST=$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)
curl -fsSL https://storage.googleapis.com/kubernetes-release/release/$KUBECTL_LATEST/bin/linux/amd64/kubectl -o $BUILD_PATHS_BINARIES_FOLDER/kubectl
curl -fsSL https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64 -o $BUILD_PATHS_BINARIES_FOLDER/minikube
KOPS_LATEST=$(git-get-latest-release https://github.com/kubernetes/kops )
curl -fsSL https://github.com/kubernetes/kops/releases/download/$KOPS_LATEST/kops-linux-amd64 -o $BUILD_PATHS_BINARIES_FOLDER/kops
ARGO_LATEST=$(git-get-latest-release https://github.com/argoproj/argo )
curl -fsSL https://github.com/argoproj/argo/releases/download/$ARGO_LATEST/argo-linux-amd64 -o $BUILD_PATHS_BINARIES_FOLDER/argo
mkdir /tmp/op
curl -fsSL https://cache.agilebits.com/dist/1P/op/pkg/v0.4/op_linux_amd64_v0.4.zip -o /tmp/op/op_linux_amd64_v0.4.zip
unzip /tmp/op/op_linux_amd64_v0.4.zip -d /tmp/op
mv /tmp/op/op $BUILD_PATHS_BINARIES_FOLDER/op
rm -r /tmp/op
chmod -R +x /usr/local/bin


# Remove unecessary dependencies
echo "### Remove unecessary dependencies..."
echo "$SETUP_DEPENDENCIES_SETUP" | tr ' ' "\n" > /tmp/A
echo "$SETUP_DEPENDENCIES_CONFIG $SETUP_DEPENDENCIES_RUNTIME" | tr ' ' "\n"  > /tmp/B
UNNECESSARY_DEPENDENDCY_SETUP=$( grep -Fxv -f /tmp/B /tmp/A | xargs )
rm -f /tmp/A /tmp/B
apk del --no-cache $UNNECESSARY_DEPENDENDCY_SETUP



exit 0